<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ExtratoClube Search</title>
  <link rel="stylesheet" href="/public/css/styles.css">
</head>
<body>
  <h1>ExtratoClube Search</h1>

  <label for="cpf">Digite o número do <b>CPF:</b></label>

  <input type="text" id="cpf" maxlength="14" oninput="formatCPF()" />

  <div class="pageSize-container">
    <label for="pageSize">Selecione a quantidade de itens por página:</label>
    <select id="pageSize">
      <option value="1">1</option>
      <option value="2">2</option>
      <option value="3">3</option>
      <option value="5">5</option>
      <option value="10" selected>10</option>
    </select>
  </div>

  <button id="searchButton" onclick="search()" disabled>Buscar</button>

  <div id="result"></div>

  <div id="paginationButtons"></div>

  <script>

    const cpfInput = document.getElementById('cpf');
    const searchButton = document.getElementById('searchButton');

    cpfInput.addEventListener('input', formatCPF);

    function formatCPF() {
      let value = cpfInput.value.replace(/\D/g, ''); // Remove o que nao for numero
      if (value.length > 11) value = value.slice(0, 11); 
      value = value.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4'); 
      cpfInput.value = value;

      // enquanto o cpf não tiver corretamente preenchido o botão fica desativado
      searchButton.disabled = value.length !== 14;

      if (searchButton.disabled) {
        searchButton.classList.add('disabled');
      } else {
        searchButton.classList.remove('disabled');
      }
    }

    async function search(page = 1) {
      const cpf = cpfInput.value
      const selectedPageSize = parseInt(document.getElementById('pageSize').value, 10);
      const response = await fetch(`/api/user-benefits?cpf=${cpf}&page=${page}&pageSize=${selectedPageSize}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      const data = await response.json();     
      const resultTable = document.createElement('table');
      resultTable.id = 'resultTable';
      const tbody = document.createElement('tbody');

      if (data?.records?.length > 0) {
        data.records.forEach(record => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td><b>CPF:</b> ${record._source.cpf}</td>
            <td><b>Matricula:</b>${record._source.matricula}</td>
          `;
          tbody.appendChild(row);
        });
      } else {
        const row = document.createElement('tr');
        row.innerHTML = '<td colspan="2">Nenhum registro de matrícula encontrado.</td>';
        tbody.appendChild(row);
      }

      resultTable.appendChild(tbody);

      const resultDiv = document.getElementById('result');
      resultDiv.innerHTML = '';
      resultDiv.appendChild(resultTable);

      updatePagination(data.pagination.page, data.pagination.pageCount);
    }

    function updatePagination(currentPage, pageCount) {
      const paginationButtons = document.getElementById('paginationButtons');
      paginationButtons.innerHTML = '';

      for (let i = 1; i <= pageCount; i++) {

        const button = document.createElement('button');

        button.textContent = i;

        if (i == currentPage) {
          button.classList.add('active'); // Adiciona classe para destacar a página atual
        }

        button.addEventListener('click', () => search(i)); // Chama a função search() com o número da página

        paginationButtons.appendChild(button);
      }
  }

  </script>
</body>
</html>
